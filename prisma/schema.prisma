generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  username       String        @unique @default(cuid())
  image          String        @default("")
  hashedPassword String?
  bio            String        @default("") @db.Text
  baner          String        @default("")
  status         String?
  lastSeen       DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  member         Member[]
  senderMessages Message[]
  messageReads   MessageRead[]
  junk           Junk[]

  @@index([username], type: Hash)
  @@index([email], type: Hash)
}

model Chat {
  id           String        @id @default(cuid())
  name         String        @default("")
  image        String        @default("")
  desc         String        @default("") @db.Text
  invitedCode  String        @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isGroup      Boolean       @default(false)
  members      Member[]
  messages     Message[]
  messageReads MessageRead[]
  junk         Junk[]
}

model Member {
  id          String   @id @default(cuid())
  chatId      String
  userId      String
  name        String?
  role        String   @default("")
  unreadCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId], type: Hash)
  @@index([userId], type: Hash)
}

model Message {
  id           String        @id @default(cuid())
  content      String?
  senderId     String
  chatId       String
  replyToId    String?
  sender       User          @relation(fields: [senderId], references: [id])
  chat         Chat          @relation(fields: [chatId], references: [id])
  replyTo      Message?      @relation("MessageReplies", fields: [replyToId], references: [id])
  replies      Message[]     @relation("MessageReplies")
  messageReads MessageRead[]
  media        Media[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Junk {
  id     String @id @default(cuid())
  userId String
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessageRead {
  id        String   @id @default(cuid())
  chatId    String
  messageId String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, messageId, chatId])
}

model Media {
  id        String   @id @default(cuid())
  value     String
  caption   String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId], type: Hash)
}
