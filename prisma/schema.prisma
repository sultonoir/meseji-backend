// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid()) @db.VarChar(36)
  name           String
  email          String   @unique
  username       String   @unique
  image          String   @default("")
  hashedPassword String?
  baner          String   @default("")
  status         String?
  lastSeen       DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  member        Member[]
  senderMessage Message[]
  junk          Junk[]
  junkMessage   JunkMessage[]
  contact       Contact[]     @relation("owner")
  friend        Contact[]     @relation("friend")
}

model Contact {
  ownerId   String
  friendId  String
  createdAt DateTime @default(now())

  owner  User @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  friend User @relation("friend", fields: [friendId], references: [id], onDelete: Cascade)

  @@id([ownerId, friendId])
  @@index([ownerId], name: "idx_owner_id")
  @@index([friendId], name: "idx_friend_id")
}

model Chat {
  id          String   @id @default(cuid()) @db.VarChar(36)
  name        String   @default("")
  image       String   @default("")
  desc        String   @default("")
  invitedCode String   @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  isGroup     Boolean  @default(false)

  member      Member[]
  message     Message[]
  junk        Junk[]
  junkMessage JunkMessage[]
}

model Member {
  id          String   @id @default(cuid()) @db.VarChar(36)
  chatId      String
  userId      String
  name        String?
  role        String   @default("")
  haveAccess  Boolean  @default(false)
  unreadCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([chatId], name: "member_chat_idx")
  @@index([userId], name: "member_user_idx")
}

model Message {
  id        String   @id @default(cuid()) @db.VarChar(36)
  content   String?
  senderId  String
  chatId    String
  replyToId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  // Self-relation for replyTo
  replyTo Message? @relation("ReplyToMessage", fields: [replyToId], references: [id], onDelete: Cascade)

  // Relasi terbalik untuk mencari pesan-pesan yang membalas pesan ini
  replies Message[] @relation("ReplyToMessage")

  media Media[]

  @@index([chatId])
  @@index([replyToId])
}

model JunkMessage {
  userId    String
  chatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@id([userId, chatId])
}

model Junk {
  id        String   @id @default(cuid()) @db.VarChar(36)
  userId    String
  chatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Media {
  id        String   @id @default(cuid()) @db.VarChar(36)
  value     String
  caption   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  messageId String

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId], name: "media_message_idx")
}
